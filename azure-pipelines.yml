# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
#- master
- master
pool:
  vmImage: 'ubuntu-latest'
stages:
  - stage: DevEnv
    jobs:
      - job: DevJobs

        #pool:
         # vmImage: 'ubuntu-latest'

        steps:
          - checkout: self
            fetchDepth: 1

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.0.7'

          - task: TerraformTaskV2@2
            inputs:
              provider: 'azurerm'
              command: 'init'
              commandOptions: '-reconfigure'
              backendServiceArm: 'LukaszMsdn'
              backendAzureRmResourceGroupName: 'demo1'
              backendAzureRmStorageAccountName: 'demoluk'
              backendAzureRmContainerName: 'yamltfdev'
              backendAzureRmKey: 'tf4/terraform.tfstate'

          - task: TerraformTaskV1@0
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out=tfplan -var-file=dev.tfvars'
              environmentServiceNameAzureRM: 'LukaszMsdn'
          - task: TerraformTaskV1@0
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: 'tfplan'
              environmentServiceNameAzureRM: 'LukaszMsdn'
  - stage: ProdEnv
    dependsOn: DevEnv
    jobs:
      - job: ProdJobs

        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self
            fetchDepth: 1

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.0.7'

          - task: TerraformTaskV2@2
            inputs:
              provider: 'azurerm'
              command: 'init'
              commandOptions: '-reconfigure'
              backendServiceArm: 'LukaszMsdn'
              backendAzureRmResourceGroupName: 'demo1'
              backendAzureRmStorageAccountName: 'demoluk'
              backendAzureRmContainerName: 'yamltfprod'
              backendAzureRmKey: 'tf4/terraform.tfstate'

          - task: TerraformTaskV1@0
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out=tfplan -var-file=prod.tfvars'
              environmentServiceNameAzureRM: 'LukaszMsdn'
          - task: TerraformTaskV1@0
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: 'tfplan'
              environmentServiceNameAzureRM: 'LukaszMsdn'          